/*
 * Conduit API
 *
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Conduit.API.Converters;

namespace Conduit.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MultipleArticlesResponse : IEquatable<MultipleArticlesResponse>
    {
        /// <summary>
        /// Gets or Sets Articles
        /// </summary>
        [Required]
        [DataMember(Name = "articles", EmitDefaultValue = false)]
        public List<Article> Articles { get; set; }

        /// <summary>
        /// Gets or Sets ArticlesCount
        /// </summary>
        [Required]
        [DataMember(Name = "articlesCount", EmitDefaultValue = true)]
        public int ArticlesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultipleArticlesResponse {\n");
            sb.Append("  Articles: ").Append(Articles).Append("\n");
            sb.Append("  ArticlesCount: ").Append(ArticlesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if ( obj is null ) return false;
            if ( ReferenceEquals(this, obj) ) return true;
            return obj.GetType() == GetType() && Equals(( MultipleArticlesResponse )obj);
        }

        /// <summary>
        /// Returns true if MultipleArticlesResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of MultipleArticlesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultipleArticlesResponse other)
        {
            if ( other is null ) return false;
            if ( ReferenceEquals(this, other) ) return true;

            return
                (
                    Articles == other.Articles ||
                    Articles != null &&
                    other.Articles != null &&
                    Articles.SequenceEqual(other.Articles)
                ) &&
                (
                    ArticlesCount == other.ArticlesCount ||

                    ArticlesCount.Equals(other.ArticlesCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if ( Articles != null )
                    hashCode = hashCode * 59 + Articles.GetHashCode();

                hashCode = hashCode * 59 + ArticlesCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(MultipleArticlesResponse left, MultipleArticlesResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MultipleArticlesResponse left, MultipleArticlesResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
