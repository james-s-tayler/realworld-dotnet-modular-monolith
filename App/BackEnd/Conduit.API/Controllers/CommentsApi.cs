/*
 * Conduit API
 *
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Conduit.API.Attributes;
using Conduit.API.Models;

namespace Conduit.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CommentsApiController : ControllerBase
    { 
        /// <summary>
        /// Create a comment for an article
        /// </summary>
        /// <remarks>Create a comment for an article. Auth is required</remarks>
        /// <param name="slug">Slug of the article that you want to create a comment for</param>
        /// <param name="comment">Comment you want to create</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpPost]
        [Route("/api/articles/{slug}/comments")]
        [Authorize(Policy = "Token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateArticleComment")]
        [SwaggerResponse(statusCode: 200, type: typeof(SingleCommentResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> CreateArticleComment([FromRoute (Name = "slug")][Required]string slug, [FromBody]NewCommentRequest comment)
        {
            return StatusCode((int)HttpStatusCode.NotImplemented);
        }

        /// <summary>
        /// Delete a comment for an article
        /// </summary>
        /// <remarks>Delete a comment for an article. Auth is required</remarks>
        /// <param name="slug">Slug of the article that you want to delete a comment for</param>
        /// <param name="id">ID of the comment you want to delete</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpDelete]
        [Route("/api/articles/{slug}/comments/{id}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("DeleteArticleComment")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> DeleteArticleComment([FromRoute (Name = "slug")][Required]string slug, [FromRoute (Name = "id")][Required]int id)
        {
            return StatusCode((int)HttpStatusCode.NotImplemented);
        }

        /// <summary>
        /// Get comments for an article
        /// </summary>
        /// <remarks>Get the comments for an article. Auth is optional</remarks>
        /// <param name="slug">Slug of the article that you want to get comments for</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpGet]
        [Route("/api/articles/{slug}/comments")]
        [ValidateModelState]
        [SwaggerOperation("GetArticleComments")]
        [SwaggerResponse(statusCode: 200, type: typeof(MultipleCommentsResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> GetArticleComments([FromRoute (Name = "slug")][Required]string slug)
        {
            return StatusCode((int)HttpStatusCode.NotImplemented);
        }
    }
}
