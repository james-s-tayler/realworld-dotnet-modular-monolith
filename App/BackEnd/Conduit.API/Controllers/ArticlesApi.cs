/*
 * Conduit API
 *
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Conduit.API.Attributes;
using Conduit.API.Models;

namespace Conduit.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ArticlesApiController : ControllerBase
    { 
        /// <summary>
        /// Create an article
        /// </summary>
        /// <remarks>Create an article. Auth is required</remarks>
        /// <param name="article">Article to create</param>
        /// <response code="201">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpPost]
        [Route("/api/articles")]
        [Authorize(Policy = "Token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateArticle")]
        [SwaggerResponse(statusCode: 201, type: typeof(SingleArticleResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> CreateArticle([FromBody]NewArticleRequest article)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(SingleArticleResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
            string exampleJson = null;
            exampleJson = "{\n  \"article\" : {\n    \"tagList\" : [ \"tagList\", \"tagList\" ],\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"author\" : {\n      \"image\" : \"image\",\n      \"following\" : true,\n      \"bio\" : \"bio\",\n      \"username\" : \"username\"\n    },\n    \"description\" : \"description\",\n    \"title\" : \"title\",\n    \"body\" : \"body\",\n    \"favoritesCount\" : 0,\n    \"slug\" : \"slug\",\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"favorited\" : true\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SingleArticleResponse>(exampleJson)
            : default(SingleArticleResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete an article
        /// </summary>
        /// <remarks>Delete an article. Auth is required</remarks>
        /// <param name="slug">Slug of the article to delete</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpDelete]
        [Route("/api/articles/{slug}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("DeleteArticle")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> DeleteArticle([FromRoute (Name = "slug")][Required]string slug)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get an article
        /// </summary>
        /// <remarks>Get an article. Auth not required</remarks>
        /// <param name="slug">Slug of the article to get</param>
        /// <response code="200">OK</response>
        /// <response code="422">Unexpected error</response>
        [HttpGet]
        [Route("/api/articles/{slug}")]
        [ValidateModelState]
        [SwaggerOperation("GetArticle")]
        [SwaggerResponse(statusCode: 200, type: typeof(SingleArticleResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> GetArticle([FromRoute (Name = "slug")][Required]string slug)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SingleArticleResponse));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
            string exampleJson = null;
            exampleJson = "{\n  \"article\" : {\n    \"tagList\" : [ \"tagList\", \"tagList\" ],\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"author\" : {\n      \"image\" : \"image\",\n      \"following\" : true,\n      \"bio\" : \"bio\",\n      \"username\" : \"username\"\n    },\n    \"description\" : \"description\",\n    \"title\" : \"title\",\n    \"body\" : \"body\",\n    \"favoritesCount\" : 0,\n    \"slug\" : \"slug\",\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"favorited\" : true\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SingleArticleResponse>(exampleJson)
            : default(SingleArticleResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get recent articles globally
        /// </summary>
        /// <remarks>Get most recent articles globally. Use query parameters to filter results. Auth is optional</remarks>
        /// <param name="tag">Filter by tag</param>
        /// <param name="author">Filter by author (username)</param>
        /// <param name="favorited">Filter by favorites of a user (username)</param>
        /// <param name="limit">Limit number of articles returned (default is 20)</param>
        /// <param name="offset">Offset/skip number of articles (default is 0)</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpGet]
        [Route("/api/articles")]
        [ValidateModelState]
        [SwaggerOperation("GetArticles")]
        [SwaggerResponse(statusCode: 200, type: typeof(MultipleArticlesResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> GetArticles([FromQuery (Name = "tag")]string tag, [FromQuery (Name = "author")]string author, [FromQuery (Name = "favorited")]string favorited, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "offset")]int? offset)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MultipleArticlesResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
            string exampleJson = null;
            exampleJson = "{\n  \"articlesCount\" : 6,\n  \"articles\" : [ {\n    \"tagList\" : [ \"tagList\", \"tagList\" ],\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"author\" : {\n      \"image\" : \"image\",\n      \"following\" : true,\n      \"bio\" : \"bio\",\n      \"username\" : \"username\"\n    },\n    \"description\" : \"description\",\n    \"title\" : \"title\",\n    \"body\" : \"body\",\n    \"favoritesCount\" : 0,\n    \"slug\" : \"slug\",\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"favorited\" : true\n  }, {\n    \"tagList\" : [ \"tagList\", \"tagList\" ],\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"author\" : {\n      \"image\" : \"image\",\n      \"following\" : true,\n      \"bio\" : \"bio\",\n      \"username\" : \"username\"\n    },\n    \"description\" : \"description\",\n    \"title\" : \"title\",\n    \"body\" : \"body\",\n    \"favoritesCount\" : 0,\n    \"slug\" : \"slug\",\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"favorited\" : true\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MultipleArticlesResponse>(exampleJson)
            : default(MultipleArticlesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get recent articles from users you follow
        /// </summary>
        /// <remarks>Get most recent articles from users you follow. Use query parameters to limit. Auth is required</remarks>
        /// <param name="limit">Limit number of articles returned (default is 20)</param>
        /// <param name="offset">Offset/skip number of articles (default is 0)</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpGet]
        [Route("/api/articles/feed")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetArticlesFeed")]
        [SwaggerResponse(statusCode: 200, type: typeof(MultipleArticlesResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> GetArticlesFeed([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "offset")]int? offset)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MultipleArticlesResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
            string exampleJson = null;
            exampleJson = "{\n  \"articlesCount\" : 6,\n  \"articles\" : [ {\n    \"tagList\" : [ \"tagList\", \"tagList\" ],\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"author\" : {\n      \"image\" : \"image\",\n      \"following\" : true,\n      \"bio\" : \"bio\",\n      \"username\" : \"username\"\n    },\n    \"description\" : \"description\",\n    \"title\" : \"title\",\n    \"body\" : \"body\",\n    \"favoritesCount\" : 0,\n    \"slug\" : \"slug\",\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"favorited\" : true\n  }, {\n    \"tagList\" : [ \"tagList\", \"tagList\" ],\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"author\" : {\n      \"image\" : \"image\",\n      \"following\" : true,\n      \"bio\" : \"bio\",\n      \"username\" : \"username\"\n    },\n    \"description\" : \"description\",\n    \"title\" : \"title\",\n    \"body\" : \"body\",\n    \"favoritesCount\" : 0,\n    \"slug\" : \"slug\",\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"favorited\" : true\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MultipleArticlesResponse>(exampleJson)
            : default(MultipleArticlesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an article
        /// </summary>
        /// <remarks>Update an article. Auth is required</remarks>
        /// <param name="slug">Slug of the article to update</param>
        /// <param name="article">Article to update</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpPut]
        [Route("/api/articles/{slug}")]
        [Authorize(Policy = "Token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateArticle")]
        [SwaggerResponse(statusCode: 200, type: typeof(SingleArticleResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> UpdateArticle([FromRoute (Name = "slug")][Required]string slug, [FromBody]UpdateArticleRequest article)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SingleArticleResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
            string exampleJson = null;
            exampleJson = "{\n  \"article\" : {\n    \"tagList\" : [ \"tagList\", \"tagList\" ],\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"author\" : {\n      \"image\" : \"image\",\n      \"following\" : true,\n      \"bio\" : \"bio\",\n      \"username\" : \"username\"\n    },\n    \"description\" : \"description\",\n    \"title\" : \"title\",\n    \"body\" : \"body\",\n    \"favoritesCount\" : 0,\n    \"slug\" : \"slug\",\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"favorited\" : true\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SingleArticleResponse>(exampleJson)
            : default(SingleArticleResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
