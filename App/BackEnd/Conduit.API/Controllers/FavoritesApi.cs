/*
 * Conduit API
 *
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using App.Content.Domain.Contracts.Operations.Commands.FavoriteArticle;
using App.Content.Domain.Contracts.Operations.Commands.UnfavoriteArticle;
using App.Core.PipelineBehaviors.OperationResponse;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Conduit.API.Attributes;
using Conduit.API.Models;
using Conduit.API.Models.Mappers;
using MediatR;

namespace Conduit.API.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FavoritesApiController : OperationResponseController
    {
        public FavoritesApiController(IMediator mediator) : base(mediator) { }

        /// <summary>
        /// Favorite an article
        /// </summary>
        /// <remarks>Favorite an article. Auth is required</remarks>
        /// <param name="slug">Slug of the article that you want to favorite</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpPost]
        [Route("/api/articles/{slug}/favorite")]
        [ValidateModelState]
        [SwaggerOperation("CreateArticleFavorite")]
        [SwaggerResponse(statusCode: 200, type: typeof(SingleArticleResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> CreateArticleFavorite([FromRoute(Name = "slug")][Required] string slug)
        {
            var favoriteArticleResponse = await Mediator.Send(new FavoriteArticleCommand { Slug = slug });

            if ( favoriteArticleResponse.Result != OperationResult.Success )
                return UnsuccessfulResponseResult(favoriteArticleResponse);

            return Ok(favoriteArticleResponse.Response.Article.ToSingleArticleResponse());
        }

        /// <summary>
        /// Unfavorite an article
        /// </summary>
        /// <remarks>Unfavorite an article. Auth is required</remarks>
        /// <param name="slug">Slug of the article that you want to unfavorite</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpDelete]
        [Route("/api/articles/{slug}/favorite")]
        [ValidateModelState]
        [SwaggerOperation("DeleteArticleFavorite")]
        [SwaggerResponse(statusCode: 200, type: typeof(SingleArticleResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> DeleteArticleFavorite([FromRoute(Name = "slug")][Required] string slug)
        {
            var unfavoriteArticleResponse = await Mediator.Send(new UnfavoriteArticleCommand { Slug = slug });

            if ( unfavoriteArticleResponse.Result != OperationResult.Success )
                return UnsuccessfulResponseResult(unfavoriteArticleResponse);

            return Ok(unfavoriteArticleResponse.Response.Article.ToSingleArticleResponse());
        }
    }
}
