/*
 * Conduit API
 *
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Conduit.API.Attributes;
using Conduit.API.Models;

namespace Conduit.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProfileApiController : ControllerBase
    { 
        /// <summary>
        /// Follow a user
        /// </summary>
        /// <remarks>Follow a user by username</remarks>
        /// <param name="username">Username of the profile you want to follow</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpPost]
        [Route("/api/profiles/{username}/follow")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("FollowUserByUsername")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProfileResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> FollowUserByUsername([FromRoute (Name = "username")][Required]string username)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProfileResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
            string exampleJson = null;
            exampleJson = "{\n  \"profile\" : {\n    \"image\" : \"image\",\n    \"following\" : true,\n    \"bio\" : \"bio\",\n    \"username\" : \"username\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProfileResponse>(exampleJson)
            : default(ProfileResponse);
            //TODO: Change the data returned
            return Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Get a profile
        /// </summary>
        /// <remarks>Get a profile of a user of the system. Auth is optional</remarks>
        /// <param name="username">Username of the profile to get</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpGet]
        [Route("/api/profiles/{username}")]
        [ValidateModelState]
        [SwaggerOperation("GetProfileByUsername")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProfileResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> GetProfileByUsername([FromRoute (Name = "username")][Required]string username)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProfileResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
            string exampleJson = null;
            exampleJson = "{\n  \"profile\" : {\n    \"image\" : \"image\",\n    \"following\" : true,\n    \"bio\" : \"bio\",\n    \"username\" : \"username\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProfileResponse>(exampleJson)
            : default(ProfileResponse);
            //TODO: Change the data returned
            return Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>Unfollow a user by username</remarks>
        /// <param name="username">Username of the profile you want to unfollow</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpDelete]
        [Route("/api/profiles/{username}/follow")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("UnfollowUserByUsername")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProfileResponse), description: "OK")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> UnfollowUserByUsername([FromRoute (Name = "username")][Required]string username)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProfileResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
            string exampleJson = null;
            exampleJson = "{\n  \"profile\" : {\n    \"image\" : \"image\",\n    \"following\" : true,\n    \"bio\" : \"bio\",\n    \"username\" : \"username\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProfileResponse>(exampleJson)
            : default(ProfileResponse);
            //TODO: Change the data returned
            return Task.FromResult<IActionResult>(new ObjectResult(example));
        }
    }
}
